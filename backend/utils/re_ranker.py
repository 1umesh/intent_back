import os
import json
import re
from dotenv import load_dotenv
# from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.schema import HumanMessage


from langchain_google_genai import ChatGoogleGenerativeAI

load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
llm = ChatGoogleGenerativeAI(model="gemini-2.5-flash",google_api_key=api_key)

prompt = PromptTemplate.from_template("""
You are an LLM-based intent re-ranker. The score provided represents the predicted conversion likelihood of a user, generated by a LightGBM model based on behavioral data.

However, since the LightGBM model cannot understand the user's query or comment directly, you are responsible for re-ranking the intent score by analyzing the user's **written message**.

---

**Inputs:**
- LightGBM Score: {score}
- User Query/Comment: "{query}"

---

**Your task:**
Analyze the query and adjust the original score by adding or subtracting points according to the rule-based intent scoring system below. This will help determine the final intent likelihood based on both behavioral data and language cues.

### Scoring Rules:
+20 → if the query contains urgency words like: "immediately", "now", "right away", "asap", "urgent"  
+15 → if the query includes buying signals like: "buy", "purchase", "order", "subscribe"  
+10 → if the query shows readiness like: "I'm ready", "get started", "help me buy", "sign up"  
+5  → if the query contains specific product/service references  
 0  → if the query is generic or neutral  
-10 → if the query contains disinterest like: "just looking", "not sure", "maybe later"  
-20 → if the query includes rejection like: "not interested", "no thanks", "stop contacting me"  

---
you can only add or subtract points from the original score based on the rules above only once.
---
wrong output example -
{{
  "best_intent": "High",
  "score": 1.02,
  "reasoning": "The user's query 'I want to subscribe to your service immediately' contains two distinct positive intent signals according to the scoring rules. The word 'immediately' falls under the 'urgency words' category, adding +0.20 to the score. The word 'subscribe' is a clear 'buying signal', adding +0.15 to the score. Combining these linguistic cues with the initial LightGBM score (0.67 + 0.20 + 0.15), the adjusted score becomes 1.02, indicating a 'High' conversion intent."
}}
Here score is adjusted twice but it is wrong, you can only add or subtract points from the original score based on the rules above only once.

                                      
---
Correct Output Example -
{{
  "best_intent": "High",
  "score": 1.02,
  "reasoning": "The user's query 'I want to subscribe to your service immediately' contains two distinct positive intent signals according to the scoring rules. The word 'immediately' falls under the 'urgency words' category, adding +0.20 to the score. The word 'subscribe' is a clear 'buying signal', adding +0.15 to the score but already one addition is taken place , we will ignore this. Combining these linguistic cues with the initial LightGBM score (0.67 + 0.20), the adjusted score becomes 0.87, indicating a 'High' conversion intent."
}}
**Output format (strictly in JSON):**
```json
{{
  "best_intent": "High | Medium | Low",
  "score": <adjusted score> muliply by 100,
  "reasoning": "Explain how you interpreted the query and applied the rules."
}}
""")

# Define input values
score = 0.67
query = "I want to subscribe to your service immediately"

def reranker(score:float,query:str):
    # Format the prompt with values
    formatted_prompt = prompt.format(score=score, query=query)

    # Send prompt to the LLM
    response = llm.invoke([HumanMessage(content=formatted_prompt)]).content

        # Remove markdown formatting (```json ... ```)
    cleaned = re.sub(r"^```json|```$", "", response.strip(), flags=re.IGNORECASE).strip()

    # Convert string to dict
    return json.loads(cleaned)


    # return response
